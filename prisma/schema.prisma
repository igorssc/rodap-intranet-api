// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

enum RolesSubject {
  USER
  SUPPORT_TICKET
}

enum RolesAction {
  MANAGE
  CREATE
  READ
  UPDATE
  DELETE
}

enum ActionLogType {
  LOGIN
  CREATE_USER
  UPDATE_USER
  UPDATE_PROFILE
  DELETE_USER
  CREATE_SUPPORT_TICKET
  UPDATE_SUPPORT_TICKET
  DELETE_SUPPORT_TICKET
}

enum SupportTicketStatus {
  OPEN
  CLOSED
  PROGRESS
}

enum SupportTicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model User {
  id                          String                 @id @default(uuid())
  name                        String
  email                       String                 @unique
  password_hash               String
  is_admin                    Boolean                @default(false)
  is_active                   Boolean                @default(true)
  created_at                  DateTime               @default(now())
  picture_profile             String?
  roles                       Role[]
  action_logs                 ActionLog[]
  support_ticket_messages     SupportTicketMessage[]
  support_tickets_created     SupportTicket[]        @relation("CreatedByUser")
  responsible_support_tickets SupportTicket[]        @relation("ResponsibleForTicket")

  @@map("users")
}

model Role {
  id         String       @id @default(uuid())
  subject    RolesSubject
  action     RolesAction
  created_at DateTime     @default(now())

  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String

  @@map("roles")
}

model ActionLog {
  id          String        @id @default(uuid())
  action_type ActionLogType
  action_data Json
  created_at  DateTime      @default(now())

  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String

  @@map("action_logs")
}

model SupportTicket {
  id            String                @id @default(uuid())
  ticket_number Int                   @default(autoincrement())
  title         String
  description   String?
  attachment    String?
  status        SupportTicketStatus   @default(OPEN)
  created_at    DateTime              @default(now())
  priority      SupportTicketPriority @default(LOW)

  messages SupportTicketMessage[]

  creator    User   @relation("CreatedByUser", fields: [creator_id], references: [id], onDelete: Cascade)
  creator_id String

  responsible    User?   @relation("ResponsibleForTicket", fields: [responsible_id], references: [id], onDelete: SetNull)
  responsible_id String?

  @@map("support_tickets")
}

model SupportTicketMessage {
  id         String   @id @default(uuid())
  message    String
  attachment String?
  created_at DateTime @default(now())

  sender    User   @relation(fields: [sender_id], references: [id], onDelete: Cascade)
  sender_id String

  ticket    SupportTicket @relation(fields: [ticket_id], references: [id], onDelete: Cascade)
  ticket_id String

  @@map("support_ticket_messages")
}
